// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/user"
	"github.com/tankbusta/gocrackdb-converter/lib/oldschema"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status oldschema.TaskStatus `json:"status,omitempty"`
	// EnginePayload holds the value of the "engine_payload" field.
	EnginePayload map[string]interface{} `json:"engine_payload,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// LastUpdatedAt holds the value of the "last_updated_at" field.
	LastUpdatedAt time.Time `json:"last_updated_at,omitempty"`
	// AssignedToHost holds the value of the "assigned_to_host" field.
	AssignedToHost string `json:"assigned_to_host,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// CaseCode holds the value of the "case_code" field.
	CaseCode string `json:"case_code,omitempty"`
	// NumberCracked holds the value of the "number_cracked" field.
	NumberCracked int `json:"number_cracked,omitempty"`
	// NumberPasswords holds the value of the "number_passwords" field.
	NumberPasswords int `json:"number_passwords,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges           TaskEdges `json:"edges"`
	task_created_by *uuid.UUID
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// CreatedBy holds the value of the created_by edge.
	CreatedBy *User `json:"created_by,omitempty"`
	// CrackedPasswords holds the value of the cracked_passwords edge.
	CrackedPasswords []*CrackedPassword `json:"cracked_passwords,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CreatedByOrErr returns the CreatedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) CreatedByOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.CreatedBy == nil {
			// The edge created_by was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.CreatedBy, nil
	}
	return nil, &NotLoadedError{edge: "created_by"}
}

// CrackedPasswordsOrErr returns the CrackedPasswords value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) CrackedPasswordsOrErr() ([]*CrackedPassword, error) {
	if e.loadedTypes[1] {
		return e.CrackedPasswords, nil
	}
	return nil, &NotLoadedError{edge: "cracked_passwords"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldEnginePayload:
			values[i] = new([]byte)
		case task.FieldNumberCracked, task.FieldNumberPasswords:
			values[i] = new(sql.NullInt64)
		case task.FieldName, task.FieldStatus, task.FieldAssignedToHost, task.FieldComment, task.FieldCaseCode, task.FieldError:
			values[i] = new(sql.NullString)
		case task.FieldCreatedAt, task.FieldLastUpdatedAt:
			values[i] = new(sql.NullTime)
		case task.FieldID:
			values[i] = new(uuid.UUID)
		case task.ForeignKeys[0]: // task_created_by
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = oldschema.TaskStatus(value.String)
			}
		case task.FieldEnginePayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field engine_payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.EnginePayload); err != nil {
					return fmt.Errorf("unmarshal field engine_payload: %w", err)
				}
			}
		case task.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case task.FieldLastUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_updated_at", values[i])
			} else if value.Valid {
				t.LastUpdatedAt = value.Time
			}
		case task.FieldAssignedToHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_to_host", values[i])
			} else if value.Valid {
				t.AssignedToHost = value.String
			}
		case task.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				t.Comment = value.String
			}
		case task.FieldCaseCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field case_code", values[i])
			} else if value.Valid {
				t.CaseCode = value.String
			}
		case task.FieldNumberCracked:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_cracked", values[i])
			} else if value.Valid {
				t.NumberCracked = int(value.Int64)
			}
		case task.FieldNumberPasswords:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field number_passwords", values[i])
			} else if value.Valid {
				t.NumberPasswords = int(value.Int64)
			}
		case task.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				t.Error = value.String
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field task_created_by", values[i])
			} else if value.Valid {
				t.task_created_by = new(uuid.UUID)
				*t.task_created_by = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryCreatedBy queries the "created_by" edge of the Task entity.
func (t *Task) QueryCreatedBy() *UserQuery {
	return (&TaskClient{config: t.config}).QueryCreatedBy(t)
}

// QueryCrackedPasswords queries the "cracked_passwords" edge of the Task entity.
func (t *Task) QueryCrackedPasswords() *CrackedPasswordQuery {
	return (&TaskClient{config: t.config}).QueryCrackedPasswords(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", name=")
	builder.WriteString(t.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", engine_payload=")
	builder.WriteString(fmt.Sprintf("%v", t.EnginePayload))
	builder.WriteString(", created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", last_updated_at=")
	builder.WriteString(t.LastUpdatedAt.Format(time.ANSIC))
	builder.WriteString(", assigned_to_host=")
	builder.WriteString(t.AssignedToHost)
	builder.WriteString(", comment=")
	builder.WriteString(t.Comment)
	builder.WriteString(", case_code=")
	builder.WriteString(t.CaseCode)
	builder.WriteString(", number_cracked=")
	builder.WriteString(fmt.Sprintf("%v", t.NumberCracked))
	builder.WriteString(", number_passwords=")
	builder.WriteString(fmt.Sprintf("%v", t.NumberPasswords))
	builder.WriteString(", error=")
	builder.WriteString(t.Error)
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
