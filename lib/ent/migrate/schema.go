// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CrackedPasswordsColumns holds the columns for the "cracked_passwords" table.
	CrackedPasswordsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hash", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "cracked_at", Type: field.TypeTime},
		{Name: "task_cracked_passwords", Type: field.TypeUUID, Nullable: true},
	}
	// CrackedPasswordsTable holds the schema information for the "cracked_passwords" table.
	CrackedPasswordsTable = &schema.Table{
		Name:       "cracked_passwords",
		Columns:    CrackedPasswordsColumns,
		PrimaryKey: []*schema.Column{CrackedPasswordsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "cracked_passwords_tasks_cracked_passwords",
				Columns:    []*schema.Column{CrackedPasswordsColumns[4]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"Queued", "Dequeued", "Running", "Stopping", "Stopped", "Error", "Exhausted", "Finished"}},
		{Name: "engine_payload", Type: field.TypeJSON, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "last_updated_at", Type: field.TypeTime},
		{Name: "assigned_to_host", Type: field.TypeString, Nullable: true},
		{Name: "comment", Type: field.TypeString, Nullable: true},
		{Name: "case_code", Type: field.TypeString, Nullable: true},
		{Name: "number_cracked", Type: field.TypeInt, Default: 0},
		{Name: "number_passwords", Type: field.TypeInt, Default: 0},
		{Name: "error", Type: field.TypeString, Nullable: true},
		{Name: "task_created_by", Type: field.TypeUUID, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_users_created_by",
				Columns:    []*schema.Column{TasksColumns[12]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "task_status",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "username", Type: field.TypeString},
		{Name: "enabled", Type: field.TypeBool},
		{Name: "email_address", Type: field.TypeString},
		{Name: "is_super_user", Type: field.TypeBool},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CrackedPasswordsTable,
		TasksTable,
		UsersTable,
	}
)

func init() {
	CrackedPasswordsTable.ForeignKeys[0].RefTable = TasksTable
	TasksTable.ForeignKeys[0].RefTable = UsersTable
}
