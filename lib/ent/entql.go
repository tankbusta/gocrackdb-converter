// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/predicate"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   crackedpassword.Table,
			Columns: crackedpassword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crackedpassword.FieldID,
			},
		},
		Type: "CrackedPassword",
		Fields: map[string]*sqlgraph.FieldSpec{
			crackedpassword.FieldHash:      {Type: field.TypeString, Column: crackedpassword.FieldHash},
			crackedpassword.FieldValue:     {Type: field.TypeString, Column: crackedpassword.FieldValue},
			crackedpassword.FieldCrackedAt: {Type: field.TypeTime, Column: crackedpassword.FieldCrackedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
		Type: "Task",
		Fields: map[string]*sqlgraph.FieldSpec{
			task.FieldName:            {Type: field.TypeString, Column: task.FieldName},
			task.FieldStatus:          {Type: field.TypeEnum, Column: task.FieldStatus},
			task.FieldEnginePayload:   {Type: field.TypeJSON, Column: task.FieldEnginePayload},
			task.FieldCreatedAt:       {Type: field.TypeTime, Column: task.FieldCreatedAt},
			task.FieldLastUpdatedAt:   {Type: field.TypeTime, Column: task.FieldLastUpdatedAt},
			task.FieldAssignedToHost:  {Type: field.TypeString, Column: task.FieldAssignedToHost},
			task.FieldComment:         {Type: field.TypeString, Column: task.FieldComment},
			task.FieldCaseCode:        {Type: field.TypeString, Column: task.FieldCaseCode},
			task.FieldNumberCracked:   {Type: field.TypeInt, Column: task.FieldNumberCracked},
			task.FieldNumberPasswords: {Type: field.TypeInt, Column: task.FieldNumberPasswords},
			task.FieldError:           {Type: field.TypeString, Column: task.FieldError},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldUsername:     {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldEnabled:      {Type: field.TypeBool, Column: user.FieldEnabled},
			user.FieldEmailAddress: {Type: field.TypeString, Column: user.FieldEmailAddress},
			user.FieldIsSuperUser:  {Type: field.TypeBool, Column: user.FieldIsSuperUser},
			user.FieldCreatedAt:    {Type: field.TypeTime, Column: user.FieldCreatedAt},
		},
	}
	graph.MustAddE(
		"related_task",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
		},
		"CrackedPassword",
		"Task",
	)
	graph.MustAddE(
		"created_by",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
		},
		"Task",
		"User",
	)
	graph.MustAddE(
		"cracked_passwords",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
		},
		"Task",
		"CrackedPassword",
	)
	graph.MustAddE(
		"created_tasks",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.CreatedTasksTable,
			Columns: []string{user.CreatedTasksColumn},
			Bidi:    false,
		},
		"User",
		"Task",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cpq *CrackedPasswordQuery) addPredicate(pred func(s *sql.Selector)) {
	cpq.predicates = append(cpq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CrackedPasswordQuery builder.
func (cpq *CrackedPasswordQuery) Filter() *CrackedPasswordFilter {
	return &CrackedPasswordFilter{cpq}
}

// addPredicate implements the predicateAdder interface.
func (m *CrackedPasswordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CrackedPasswordMutation builder.
func (m *CrackedPasswordMutation) Filter() *CrackedPasswordFilter {
	return &CrackedPasswordFilter{m}
}

// CrackedPasswordFilter provides a generic filtering capability at runtime for CrackedPasswordQuery.
type CrackedPasswordFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *CrackedPasswordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *CrackedPasswordFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(crackedpassword.FieldID))
}

// WhereHash applies the entql string predicate on the hash field.
func (f *CrackedPasswordFilter) WhereHash(p entql.StringP) {
	f.Where(p.Field(crackedpassword.FieldHash))
}

// WhereValue applies the entql string predicate on the value field.
func (f *CrackedPasswordFilter) WhereValue(p entql.StringP) {
	f.Where(p.Field(crackedpassword.FieldValue))
}

// WhereCrackedAt applies the entql time.Time predicate on the cracked_at field.
func (f *CrackedPasswordFilter) WhereCrackedAt(p entql.TimeP) {
	f.Where(p.Field(crackedpassword.FieldCrackedAt))
}

// WhereHasRelatedTask applies a predicate to check if query has an edge related_task.
func (f *CrackedPasswordFilter) WhereHasRelatedTask() {
	f.Where(entql.HasEdge("related_task"))
}

// WhereHasRelatedTaskWith applies a predicate to check if query has an edge related_task with a given conditions (other predicates).
func (f *CrackedPasswordFilter) WhereHasRelatedTaskWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("related_task", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TaskQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TaskQuery builder.
func (tq *TaskQuery) Filter() *TaskFilter {
	return &TaskFilter{tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TaskMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TaskMutation builder.
func (m *TaskMutation) Filter() *TaskFilter {
	return &TaskFilter{m}
}

// TaskFilter provides a generic filtering capability at runtime for TaskQuery.
type TaskFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *TaskFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TaskFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(task.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TaskFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(task.FieldName))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *TaskFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(task.FieldStatus))
}

// WhereEnginePayload applies the entql json.RawMessage predicate on the engine_payload field.
func (f *TaskFilter) WhereEnginePayload(p entql.BytesP) {
	f.Where(p.Field(task.FieldEnginePayload))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *TaskFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldCreatedAt))
}

// WhereLastUpdatedAt applies the entql time.Time predicate on the last_updated_at field.
func (f *TaskFilter) WhereLastUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(task.FieldLastUpdatedAt))
}

// WhereAssignedToHost applies the entql string predicate on the assigned_to_host field.
func (f *TaskFilter) WhereAssignedToHost(p entql.StringP) {
	f.Where(p.Field(task.FieldAssignedToHost))
}

// WhereComment applies the entql string predicate on the comment field.
func (f *TaskFilter) WhereComment(p entql.StringP) {
	f.Where(p.Field(task.FieldComment))
}

// WhereCaseCode applies the entql string predicate on the case_code field.
func (f *TaskFilter) WhereCaseCode(p entql.StringP) {
	f.Where(p.Field(task.FieldCaseCode))
}

// WhereNumberCracked applies the entql int predicate on the number_cracked field.
func (f *TaskFilter) WhereNumberCracked(p entql.IntP) {
	f.Where(p.Field(task.FieldNumberCracked))
}

// WhereNumberPasswords applies the entql int predicate on the number_passwords field.
func (f *TaskFilter) WhereNumberPasswords(p entql.IntP) {
	f.Where(p.Field(task.FieldNumberPasswords))
}

// WhereError applies the entql string predicate on the error field.
func (f *TaskFilter) WhereError(p entql.StringP) {
	f.Where(p.Field(task.FieldError))
}

// WhereHasCreatedBy applies a predicate to check if query has an edge created_by.
func (f *TaskFilter) WhereHasCreatedBy() {
	f.Where(entql.HasEdge("created_by"))
}

// WhereHasCreatedByWith applies a predicate to check if query has an edge created_by with a given conditions (other predicates).
func (f *TaskFilter) WhereHasCreatedByWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("created_by", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasCrackedPasswords applies a predicate to check if query has an edge cracked_passwords.
func (f *TaskFilter) WhereHasCrackedPasswords() {
	f.Where(entql.HasEdge("cracked_passwords"))
}

// WhereHasCrackedPasswordsWith applies a predicate to check if query has an edge cracked_passwords with a given conditions (other predicates).
func (f *TaskFilter) WhereHasCrackedPasswordsWith(preds ...predicate.CrackedPassword) {
	f.Where(entql.HasEdgeWith("cracked_passwords", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *UserFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(user.FieldID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereEnabled applies the entql bool predicate on the enabled field.
func (f *UserFilter) WhereEnabled(p entql.BoolP) {
	f.Where(p.Field(user.FieldEnabled))
}

// WhereEmailAddress applies the entql string predicate on the email_address field.
func (f *UserFilter) WhereEmailAddress(p entql.StringP) {
	f.Where(p.Field(user.FieldEmailAddress))
}

// WhereIsSuperUser applies the entql bool predicate on the is_super_user field.
func (f *UserFilter) WhereIsSuperUser(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsSuperUser))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereHasCreatedTasks applies a predicate to check if query has an edge created_tasks.
func (f *UserFilter) WhereHasCreatedTasks() {
	f.Where(entql.HasEdge("created_tasks"))
}

// WhereHasCreatedTasksWith applies a predicate to check if query has an edge created_tasks with a given conditions (other predicates).
func (f *UserFilter) WhereHasCreatedTasksWith(preds ...predicate.Task) {
	f.Where(entql.HasEdgeWith("created_tasks", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
