// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/user"
	"github.com/tankbusta/gocrackdb-converter/lib/oldschema"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TaskCreate) SetName(s string) *TaskCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetStatus sets the "status" field.
func (tc *TaskCreate) SetStatus(os oldschema.TaskStatus) *TaskCreate {
	tc.mutation.SetStatus(os)
	return tc
}

// SetEnginePayload sets the "engine_payload" field.
func (tc *TaskCreate) SetEnginePayload(m map[string]interface{}) *TaskCreate {
	tc.mutation.SetEnginePayload(m)
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TaskCreate) SetCreatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCreatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (tc *TaskCreate) SetLastUpdatedAt(t time.Time) *TaskCreate {
	tc.mutation.SetLastUpdatedAt(t)
	return tc
}

// SetNillableLastUpdatedAt sets the "last_updated_at" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLastUpdatedAt(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetLastUpdatedAt(*t)
	}
	return tc
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (tc *TaskCreate) SetAssignedToHost(s string) *TaskCreate {
	tc.mutation.SetAssignedToHost(s)
	return tc
}

// SetNillableAssignedToHost sets the "assigned_to_host" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAssignedToHost(s *string) *TaskCreate {
	if s != nil {
		tc.SetAssignedToHost(*s)
	}
	return tc
}

// SetComment sets the "comment" field.
func (tc *TaskCreate) SetComment(s string) *TaskCreate {
	tc.mutation.SetComment(s)
	return tc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tc *TaskCreate) SetNillableComment(s *string) *TaskCreate {
	if s != nil {
		tc.SetComment(*s)
	}
	return tc
}

// SetCaseCode sets the "case_code" field.
func (tc *TaskCreate) SetCaseCode(s string) *TaskCreate {
	tc.mutation.SetCaseCode(s)
	return tc
}

// SetNillableCaseCode sets the "case_code" field if the given value is not nil.
func (tc *TaskCreate) SetNillableCaseCode(s *string) *TaskCreate {
	if s != nil {
		tc.SetCaseCode(*s)
	}
	return tc
}

// SetNumberCracked sets the "number_cracked" field.
func (tc *TaskCreate) SetNumberCracked(i int) *TaskCreate {
	tc.mutation.SetNumberCracked(i)
	return tc
}

// SetNillableNumberCracked sets the "number_cracked" field if the given value is not nil.
func (tc *TaskCreate) SetNillableNumberCracked(i *int) *TaskCreate {
	if i != nil {
		tc.SetNumberCracked(*i)
	}
	return tc
}

// SetNumberPasswords sets the "number_passwords" field.
func (tc *TaskCreate) SetNumberPasswords(i int) *TaskCreate {
	tc.mutation.SetNumberPasswords(i)
	return tc
}

// SetNillableNumberPasswords sets the "number_passwords" field if the given value is not nil.
func (tc *TaskCreate) SetNillableNumberPasswords(i *int) *TaskCreate {
	if i != nil {
		tc.SetNumberPasswords(*i)
	}
	return tc
}

// SetError sets the "error" field.
func (tc *TaskCreate) SetError(s string) *TaskCreate {
	tc.mutation.SetError(s)
	return tc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tc *TaskCreate) SetNillableError(s *string) *TaskCreate {
	if s != nil {
		tc.SetError(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TaskCreate) SetID(u uuid.UUID) *TaskCreate {
	tc.mutation.SetID(u)
	return tc
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (tc *TaskCreate) SetCreatedByID(id uuid.UUID) *TaskCreate {
	tc.mutation.SetCreatedByID(id)
	return tc
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tc *TaskCreate) SetCreatedBy(u *User) *TaskCreate {
	return tc.SetCreatedByID(u.ID)
}

// AddCrackedPasswordIDs adds the "cracked_passwords" edge to the CrackedPassword entity by IDs.
func (tc *TaskCreate) AddCrackedPasswordIDs(ids ...uuid.UUID) *TaskCreate {
	tc.mutation.AddCrackedPasswordIDs(ids...)
	return tc
}

// AddCrackedPasswords adds the "cracked_passwords" edges to the CrackedPassword entity.
func (tc *TaskCreate) AddCrackedPasswords(c ...*CrackedPassword) *TaskCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCrackedPasswordIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	tc.defaults()
	if len(tc.hooks) == 0 {
		if err = tc.check(); err != nil {
			return nil, err
		}
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tc.check(); err != nil {
				return nil, err
			}
			tc.mutation = mutation
			if node, err = tc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			if tc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.LastUpdatedAt(); !ok {
		v := task.DefaultLastUpdatedAt()
		tc.mutation.SetLastUpdatedAt(v)
	}
	if _, ok := tc.mutation.NumberCracked(); !ok {
		v := task.DefaultNumberCracked
		tc.mutation.SetNumberCracked(v)
	}
	if _, ok := tc.mutation.NumberPasswords(); !ok {
		v := task.DefaultNumberPasswords
		tc.mutation.SetNumberPasswords(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := task.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Task.name"`)}
	}
	if _, ok := tc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Task.status"`)}
	}
	if v, ok := tc.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := tc.mutation.LastUpdatedAt(); !ok {
		return &ValidationError{Name: "last_updated_at", err: errors.New(`ent: missing required field "Task.last_updated_at"`)}
	}
	if _, ok := tc.mutation.NumberCracked(); !ok {
		return &ValidationError{Name: "number_cracked", err: errors.New(`ent: missing required field "Task.number_cracked"`)}
	}
	if _, ok := tc.mutation.NumberPasswords(); !ok {
		return &ValidationError{Name: "number_passwords", err: errors.New(`ent: missing required field "Task.number_passwords"`)}
	}
	if _, ok := tc.mutation.CreatedByID(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required edge "Task.created_by"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: task.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		}
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: task.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := tc.mutation.EnginePayload(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldEnginePayload,
		})
		_node.EnginePayload = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.LastUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldLastUpdatedAt,
		})
		_node.LastUpdatedAt = value
	}
	if value, ok := tc.mutation.AssignedToHost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldAssignedToHost,
		})
		_node.AssignedToHost = value
	}
	if value, ok := tc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldComment,
		})
		_node.Comment = value
	}
	if value, ok := tc.mutation.CaseCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCaseCode,
		})
		_node.CaseCode = value
	}
	if value, ok := tc.mutation.NumberCracked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberCracked,
		})
		_node.NumberCracked = value
	}
	if value, ok := tc.mutation.NumberPasswords(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberPasswords,
		})
		_node.NumberPasswords = value
	}
	if value, ok := tc.mutation.Error(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldError,
		})
		_node.Error = value
	}
	if nodes := tc.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_created_by = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CrackedPasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TaskUpsert) SetName(v string) *TaskUpsert {
	u.Set(task.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateName() *TaskUpsert {
	u.SetExcluded(task.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *TaskUpsert) SetStatus(v oldschema.TaskStatus) *TaskUpsert {
	u.Set(task.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsert) UpdateStatus() *TaskUpsert {
	u.SetExcluded(task.FieldStatus)
	return u
}

// SetEnginePayload sets the "engine_payload" field.
func (u *TaskUpsert) SetEnginePayload(v map[string]interface{}) *TaskUpsert {
	u.Set(task.FieldEnginePayload, v)
	return u
}

// UpdateEnginePayload sets the "engine_payload" field to the value that was provided on create.
func (u *TaskUpsert) UpdateEnginePayload() *TaskUpsert {
	u.SetExcluded(task.FieldEnginePayload)
	return u
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (u *TaskUpsert) ClearEnginePayload() *TaskUpsert {
	u.SetNull(task.FieldEnginePayload)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskUpsert) SetCreatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCreatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldCreatedAt)
	return u
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TaskUpsert) SetLastUpdatedAt(v time.Time) *TaskUpsert {
	u.Set(task.FieldLastUpdatedAt, v)
	return u
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLastUpdatedAt() *TaskUpsert {
	u.SetExcluded(task.FieldLastUpdatedAt)
	return u
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (u *TaskUpsert) SetAssignedToHost(v string) *TaskUpsert {
	u.Set(task.FieldAssignedToHost, v)
	return u
}

// UpdateAssignedToHost sets the "assigned_to_host" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAssignedToHost() *TaskUpsert {
	u.SetExcluded(task.FieldAssignedToHost)
	return u
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (u *TaskUpsert) ClearAssignedToHost() *TaskUpsert {
	u.SetNull(task.FieldAssignedToHost)
	return u
}

// SetComment sets the "comment" field.
func (u *TaskUpsert) SetComment(v string) *TaskUpsert {
	u.Set(task.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *TaskUpsert) UpdateComment() *TaskUpsert {
	u.SetExcluded(task.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *TaskUpsert) ClearComment() *TaskUpsert {
	u.SetNull(task.FieldComment)
	return u
}

// SetCaseCode sets the "case_code" field.
func (u *TaskUpsert) SetCaseCode(v string) *TaskUpsert {
	u.Set(task.FieldCaseCode, v)
	return u
}

// UpdateCaseCode sets the "case_code" field to the value that was provided on create.
func (u *TaskUpsert) UpdateCaseCode() *TaskUpsert {
	u.SetExcluded(task.FieldCaseCode)
	return u
}

// ClearCaseCode clears the value of the "case_code" field.
func (u *TaskUpsert) ClearCaseCode() *TaskUpsert {
	u.SetNull(task.FieldCaseCode)
	return u
}

// SetNumberCracked sets the "number_cracked" field.
func (u *TaskUpsert) SetNumberCracked(v int) *TaskUpsert {
	u.Set(task.FieldNumberCracked, v)
	return u
}

// UpdateNumberCracked sets the "number_cracked" field to the value that was provided on create.
func (u *TaskUpsert) UpdateNumberCracked() *TaskUpsert {
	u.SetExcluded(task.FieldNumberCracked)
	return u
}

// AddNumberCracked adds v to the "number_cracked" field.
func (u *TaskUpsert) AddNumberCracked(v int) *TaskUpsert {
	u.Add(task.FieldNumberCracked, v)
	return u
}

// SetNumberPasswords sets the "number_passwords" field.
func (u *TaskUpsert) SetNumberPasswords(v int) *TaskUpsert {
	u.Set(task.FieldNumberPasswords, v)
	return u
}

// UpdateNumberPasswords sets the "number_passwords" field to the value that was provided on create.
func (u *TaskUpsert) UpdateNumberPasswords() *TaskUpsert {
	u.SetExcluded(task.FieldNumberPasswords)
	return u
}

// AddNumberPasswords adds v to the "number_passwords" field.
func (u *TaskUpsert) AddNumberPasswords(v int) *TaskUpsert {
	u.Add(task.FieldNumberPasswords, v)
	return u
}

// SetError sets the "error" field.
func (u *TaskUpsert) SetError(v string) *TaskUpsert {
	u.Set(task.FieldError, v)
	return u
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsert) UpdateError() *TaskUpsert {
	u.SetExcluded(task.FieldError)
	return u
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsert) ClearError() *TaskUpsert {
	u.SetNull(task.FieldError)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(task.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(task.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.LastUpdatedAt(); exists {
			s.SetIgnore(task.FieldLastUpdatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Task.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskUpsertOne) SetName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertOne) SetStatus(v oldschema.TaskStatus) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateStatus() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetEnginePayload sets the "engine_payload" field.
func (u *TaskUpsertOne) SetEnginePayload(v map[string]interface{}) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetEnginePayload(v)
	})
}

// UpdateEnginePayload sets the "engine_payload" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateEnginePayload() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEnginePayload()
	})
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (u *TaskUpsertOne) ClearEnginePayload() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearEnginePayload()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskUpsertOne) SetCreatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCreatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TaskUpsertOne) SetLastUpdatedAt(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastUpdatedAt(v)
	})
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLastUpdatedAt() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastUpdatedAt()
	})
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (u *TaskUpsertOne) SetAssignedToHost(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAssignedToHost(v)
	})
}

// UpdateAssignedToHost sets the "assigned_to_host" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAssignedToHost() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAssignedToHost()
	})
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (u *TaskUpsertOne) ClearAssignedToHost() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAssignedToHost()
	})
}

// SetComment sets the "comment" field.
func (u *TaskUpsertOne) SetComment(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateComment() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *TaskUpsertOne) ClearComment() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearComment()
	})
}

// SetCaseCode sets the "case_code" field.
func (u *TaskUpsertOne) SetCaseCode(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetCaseCode(v)
	})
}

// UpdateCaseCode sets the "case_code" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateCaseCode() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCaseCode()
	})
}

// ClearCaseCode clears the value of the "case_code" field.
func (u *TaskUpsertOne) ClearCaseCode() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCaseCode()
	})
}

// SetNumberCracked sets the "number_cracked" field.
func (u *TaskUpsertOne) SetNumberCracked(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetNumberCracked(v)
	})
}

// AddNumberCracked adds v to the "number_cracked" field.
func (u *TaskUpsertOne) AddNumberCracked(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddNumberCracked(v)
	})
}

// UpdateNumberCracked sets the "number_cracked" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateNumberCracked() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNumberCracked()
	})
}

// SetNumberPasswords sets the "number_passwords" field.
func (u *TaskUpsertOne) SetNumberPasswords(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetNumberPasswords(v)
	})
}

// AddNumberPasswords adds v to the "number_passwords" field.
func (u *TaskUpsertOne) AddNumberPasswords(v int) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.AddNumberPasswords(v)
	})
}

// UpdateNumberPasswords sets the "number_passwords" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateNumberPasswords() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNumberPasswords()
	})
}

// SetError sets the "error" field.
func (u *TaskUpsertOne) SetError(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsertOne) ClearError() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TaskUpsertOne.ID is not supported by MySQL driver. Use TaskUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(task.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(task.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(task.FieldCreatedAt)
			}
			if _, exists := b.mutation.LastUpdatedAt(); exists {
				s.SetIgnore(task.FieldLastUpdatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskUpsertBulk) SetName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetStatus sets the "status" field.
func (u *TaskUpsertBulk) SetStatus(v oldschema.TaskStatus) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateStatus() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateStatus()
	})
}

// SetEnginePayload sets the "engine_payload" field.
func (u *TaskUpsertBulk) SetEnginePayload(v map[string]interface{}) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetEnginePayload(v)
	})
}

// UpdateEnginePayload sets the "engine_payload" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateEnginePayload() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateEnginePayload()
	})
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (u *TaskUpsertBulk) ClearEnginePayload() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearEnginePayload()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TaskUpsertBulk) SetCreatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCreatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (u *TaskUpsertBulk) SetLastUpdatedAt(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLastUpdatedAt(v)
	})
}

// UpdateLastUpdatedAt sets the "last_updated_at" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLastUpdatedAt() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLastUpdatedAt()
	})
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (u *TaskUpsertBulk) SetAssignedToHost(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAssignedToHost(v)
	})
}

// UpdateAssignedToHost sets the "assigned_to_host" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAssignedToHost() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAssignedToHost()
	})
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (u *TaskUpsertBulk) ClearAssignedToHost() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAssignedToHost()
	})
}

// SetComment sets the "comment" field.
func (u *TaskUpsertBulk) SetComment(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateComment() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *TaskUpsertBulk) ClearComment() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearComment()
	})
}

// SetCaseCode sets the "case_code" field.
func (u *TaskUpsertBulk) SetCaseCode(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetCaseCode(v)
	})
}

// UpdateCaseCode sets the "case_code" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateCaseCode() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateCaseCode()
	})
}

// ClearCaseCode clears the value of the "case_code" field.
func (u *TaskUpsertBulk) ClearCaseCode() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearCaseCode()
	})
}

// SetNumberCracked sets the "number_cracked" field.
func (u *TaskUpsertBulk) SetNumberCracked(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetNumberCracked(v)
	})
}

// AddNumberCracked adds v to the "number_cracked" field.
func (u *TaskUpsertBulk) AddNumberCracked(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddNumberCracked(v)
	})
}

// UpdateNumberCracked sets the "number_cracked" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateNumberCracked() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNumberCracked()
	})
}

// SetNumberPasswords sets the "number_passwords" field.
func (u *TaskUpsertBulk) SetNumberPasswords(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetNumberPasswords(v)
	})
}

// AddNumberPasswords adds v to the "number_passwords" field.
func (u *TaskUpsertBulk) AddNumberPasswords(v int) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.AddNumberPasswords(v)
	})
}

// UpdateNumberPasswords sets the "number_passwords" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateNumberPasswords() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateNumberPasswords()
	})
}

// SetError sets the "error" field.
func (u *TaskUpsertBulk) SetError(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetError(v)
	})
}

// UpdateError sets the "error" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateError()
	})
}

// ClearError clears the value of the "error" field.
func (u *TaskUpsertBulk) ClearError() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearError()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
