// Code generated by entc, DO NOT EDIT.

package crackedpassword

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the crackedpassword type in the database.
	Label = "cracked_password"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHash holds the string denoting the hash field in the database.
	FieldHash = "hash"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// FieldCrackedAt holds the string denoting the cracked_at field in the database.
	FieldCrackedAt = "cracked_at"
	// EdgeRelatedTask holds the string denoting the related_task edge name in mutations.
	EdgeRelatedTask = "related_task"
	// Table holds the table name of the crackedpassword in the database.
	Table = "cracked_passwords"
	// RelatedTaskTable is the table that holds the related_task relation/edge.
	RelatedTaskTable = "cracked_passwords"
	// RelatedTaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	RelatedTaskInverseTable = "tasks"
	// RelatedTaskColumn is the table column denoting the related_task relation/edge.
	RelatedTaskColumn = "task_cracked_passwords"
)

// Columns holds all SQL columns for crackedpassword fields.
var Columns = []string{
	FieldID,
	FieldHash,
	FieldValue,
	FieldCrackedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cracked_passwords"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_cracked_passwords",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCrackedAt holds the default value on creation for the "cracked_at" field.
	DefaultCrackedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
