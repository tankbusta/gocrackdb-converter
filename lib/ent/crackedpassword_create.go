// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
)

// CrackedPasswordCreate is the builder for creating a CrackedPassword entity.
type CrackedPasswordCreate struct {
	config
	mutation *CrackedPasswordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHash sets the "hash" field.
func (cpc *CrackedPasswordCreate) SetHash(s string) *CrackedPasswordCreate {
	cpc.mutation.SetHash(s)
	return cpc
}

// SetValue sets the "value" field.
func (cpc *CrackedPasswordCreate) SetValue(s string) *CrackedPasswordCreate {
	cpc.mutation.SetValue(s)
	return cpc
}

// SetCrackedAt sets the "cracked_at" field.
func (cpc *CrackedPasswordCreate) SetCrackedAt(t time.Time) *CrackedPasswordCreate {
	cpc.mutation.SetCrackedAt(t)
	return cpc
}

// SetNillableCrackedAt sets the "cracked_at" field if the given value is not nil.
func (cpc *CrackedPasswordCreate) SetNillableCrackedAt(t *time.Time) *CrackedPasswordCreate {
	if t != nil {
		cpc.SetCrackedAt(*t)
	}
	return cpc
}

// SetID sets the "id" field.
func (cpc *CrackedPasswordCreate) SetID(u uuid.UUID) *CrackedPasswordCreate {
	cpc.mutation.SetID(u)
	return cpc
}

// SetRelatedTaskID sets the "related_task" edge to the Task entity by ID.
func (cpc *CrackedPasswordCreate) SetRelatedTaskID(id uuid.UUID) *CrackedPasswordCreate {
	cpc.mutation.SetRelatedTaskID(id)
	return cpc
}

// SetRelatedTask sets the "related_task" edge to the Task entity.
func (cpc *CrackedPasswordCreate) SetRelatedTask(t *Task) *CrackedPasswordCreate {
	return cpc.SetRelatedTaskID(t.ID)
}

// Mutation returns the CrackedPasswordMutation object of the builder.
func (cpc *CrackedPasswordCreate) Mutation() *CrackedPasswordMutation {
	return cpc.mutation
}

// Save creates the CrackedPassword in the database.
func (cpc *CrackedPasswordCreate) Save(ctx context.Context) (*CrackedPassword, error) {
	var (
		err  error
		node *CrackedPassword
	)
	cpc.defaults()
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrackedPasswordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CrackedPasswordCreate) SaveX(ctx context.Context) *CrackedPassword {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CrackedPasswordCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CrackedPasswordCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CrackedPasswordCreate) defaults() {
	if _, ok := cpc.mutation.CrackedAt(); !ok {
		v := crackedpassword.DefaultCrackedAt()
		cpc.mutation.SetCrackedAt(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := crackedpassword.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CrackedPasswordCreate) check() error {
	if _, ok := cpc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "CrackedPassword.hash"`)}
	}
	if _, ok := cpc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "CrackedPassword.value"`)}
	}
	if _, ok := cpc.mutation.CrackedAt(); !ok {
		return &ValidationError{Name: "cracked_at", err: errors.New(`ent: missing required field "CrackedPassword.cracked_at"`)}
	}
	if _, ok := cpc.mutation.RelatedTaskID(); !ok {
		return &ValidationError{Name: "related_task", err: errors.New(`ent: missing required edge "CrackedPassword.related_task"`)}
	}
	return nil
}

func (cpc *CrackedPasswordCreate) sqlSave(ctx context.Context) (*CrackedPassword, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cpc *CrackedPasswordCreate) createSpec() (*CrackedPassword, *sqlgraph.CreateSpec) {
	var (
		_node = &CrackedPassword{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: crackedpassword.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crackedpassword.FieldID,
			},
		}
	)
	_spec.OnConflict = cpc.conflict
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cpc.mutation.Hash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldHash,
		})
		_node.Hash = value
	}
	if value, ok := cpc.mutation.Value(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldValue,
		})
		_node.Value = value
	}
	if value, ok := cpc.mutation.CrackedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: crackedpassword.FieldCrackedAt,
		})
		_node.CrackedAt = value
	}
	if nodes := cpc.mutation.RelatedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.task_cracked_passwords = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CrackedPassword.Create().
//		SetHash(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CrackedPasswordUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (cpc *CrackedPasswordCreate) OnConflict(opts ...sql.ConflictOption) *CrackedPasswordUpsertOne {
	cpc.conflict = opts
	return &CrackedPasswordUpsertOne{
		create: cpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CrackedPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpc *CrackedPasswordCreate) OnConflictColumns(columns ...string) *CrackedPasswordUpsertOne {
	cpc.conflict = append(cpc.conflict, sql.ConflictColumns(columns...))
	return &CrackedPasswordUpsertOne{
		create: cpc,
	}
}

type (
	// CrackedPasswordUpsertOne is the builder for "upsert"-ing
	//  one CrackedPassword node.
	CrackedPasswordUpsertOne struct {
		create *CrackedPasswordCreate
	}

	// CrackedPasswordUpsert is the "OnConflict" setter.
	CrackedPasswordUpsert struct {
		*sql.UpdateSet
	}
)

// SetHash sets the "hash" field.
func (u *CrackedPasswordUpsert) SetHash(v string) *CrackedPasswordUpsert {
	u.Set(crackedpassword.FieldHash, v)
	return u
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CrackedPasswordUpsert) UpdateHash() *CrackedPasswordUpsert {
	u.SetExcluded(crackedpassword.FieldHash)
	return u
}

// SetValue sets the "value" field.
func (u *CrackedPasswordUpsert) SetValue(v string) *CrackedPasswordUpsert {
	u.Set(crackedpassword.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CrackedPasswordUpsert) UpdateValue() *CrackedPasswordUpsert {
	u.SetExcluded(crackedpassword.FieldValue)
	return u
}

// SetCrackedAt sets the "cracked_at" field.
func (u *CrackedPasswordUpsert) SetCrackedAt(v time.Time) *CrackedPasswordUpsert {
	u.Set(crackedpassword.FieldCrackedAt, v)
	return u
}

// UpdateCrackedAt sets the "cracked_at" field to the value that was provided on create.
func (u *CrackedPasswordUpsert) UpdateCrackedAt() *CrackedPasswordUpsert {
	u.SetExcluded(crackedpassword.FieldCrackedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CrackedPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(crackedpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CrackedPasswordUpsertOne) UpdateNewValues() *CrackedPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(crackedpassword.FieldID)
		}
		if _, exists := u.create.mutation.CrackedAt(); exists {
			s.SetIgnore(crackedpassword.FieldCrackedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.CrackedPassword.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *CrackedPasswordUpsertOne) Ignore() *CrackedPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CrackedPasswordUpsertOne) DoNothing() *CrackedPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CrackedPasswordCreate.OnConflict
// documentation for more info.
func (u *CrackedPasswordUpsertOne) Update(set func(*CrackedPasswordUpsert)) *CrackedPasswordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CrackedPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *CrackedPasswordUpsertOne) SetHash(v string) *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CrackedPasswordUpsertOne) UpdateHash() *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateHash()
	})
}

// SetValue sets the "value" field.
func (u *CrackedPasswordUpsertOne) SetValue(v string) *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CrackedPasswordUpsertOne) UpdateValue() *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateValue()
	})
}

// SetCrackedAt sets the "cracked_at" field.
func (u *CrackedPasswordUpsertOne) SetCrackedAt(v time.Time) *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetCrackedAt(v)
	})
}

// UpdateCrackedAt sets the "cracked_at" field to the value that was provided on create.
func (u *CrackedPasswordUpsertOne) UpdateCrackedAt() *CrackedPasswordUpsertOne {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateCrackedAt()
	})
}

// Exec executes the query.
func (u *CrackedPasswordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CrackedPasswordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CrackedPasswordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CrackedPasswordUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CrackedPasswordUpsertOne.ID is not supported by MySQL driver. Use CrackedPasswordUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CrackedPasswordUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CrackedPasswordCreateBulk is the builder for creating many CrackedPassword entities in bulk.
type CrackedPasswordCreateBulk struct {
	config
	builders []*CrackedPasswordCreate
	conflict []sql.ConflictOption
}

// Save creates the CrackedPassword entities in the database.
func (cpcb *CrackedPasswordCreateBulk) Save(ctx context.Context) ([]*CrackedPassword, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CrackedPassword, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CrackedPasswordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CrackedPasswordCreateBulk) SaveX(ctx context.Context) []*CrackedPassword {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CrackedPasswordCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CrackedPasswordCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CrackedPassword.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CrackedPasswordUpsert) {
//			SetHash(v+v).
//		}).
//		Exec(ctx)
//
func (cpcb *CrackedPasswordCreateBulk) OnConflict(opts ...sql.ConflictOption) *CrackedPasswordUpsertBulk {
	cpcb.conflict = opts
	return &CrackedPasswordUpsertBulk{
		create: cpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CrackedPassword.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (cpcb *CrackedPasswordCreateBulk) OnConflictColumns(columns ...string) *CrackedPasswordUpsertBulk {
	cpcb.conflict = append(cpcb.conflict, sql.ConflictColumns(columns...))
	return &CrackedPasswordUpsertBulk{
		create: cpcb,
	}
}

// CrackedPasswordUpsertBulk is the builder for "upsert"-ing
// a bulk of CrackedPassword nodes.
type CrackedPasswordUpsertBulk struct {
	create *CrackedPasswordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CrackedPassword.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(crackedpassword.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *CrackedPasswordUpsertBulk) UpdateNewValues() *CrackedPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(crackedpassword.FieldID)
				return
			}
			if _, exists := b.mutation.CrackedAt(); exists {
				s.SetIgnore(crackedpassword.FieldCrackedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CrackedPassword.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *CrackedPasswordUpsertBulk) Ignore() *CrackedPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CrackedPasswordUpsertBulk) DoNothing() *CrackedPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CrackedPasswordCreateBulk.OnConflict
// documentation for more info.
func (u *CrackedPasswordUpsertBulk) Update(set func(*CrackedPasswordUpsert)) *CrackedPasswordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CrackedPasswordUpsert{UpdateSet: update})
	}))
	return u
}

// SetHash sets the "hash" field.
func (u *CrackedPasswordUpsertBulk) SetHash(v string) *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetHash(v)
	})
}

// UpdateHash sets the "hash" field to the value that was provided on create.
func (u *CrackedPasswordUpsertBulk) UpdateHash() *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateHash()
	})
}

// SetValue sets the "value" field.
func (u *CrackedPasswordUpsertBulk) SetValue(v string) *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *CrackedPasswordUpsertBulk) UpdateValue() *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateValue()
	})
}

// SetCrackedAt sets the "cracked_at" field.
func (u *CrackedPasswordUpsertBulk) SetCrackedAt(v time.Time) *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.SetCrackedAt(v)
	})
}

// UpdateCrackedAt sets the "cracked_at" field to the value that was provided on create.
func (u *CrackedPasswordUpsertBulk) UpdateCrackedAt() *CrackedPasswordUpsertBulk {
	return u.Update(func(s *CrackedPasswordUpsert) {
		s.UpdateCrackedAt()
	})
}

// Exec executes the query.
func (u *CrackedPasswordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CrackedPasswordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CrackedPasswordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CrackedPasswordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
