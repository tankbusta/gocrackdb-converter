// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
)

// CrackedPassword is the model entity for the CrackedPassword schema.
type CrackedPassword struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CrackedAt holds the value of the "cracked_at" field.
	CrackedAt time.Time `json:"cracked_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CrackedPasswordQuery when eager-loading is set.
	Edges                  CrackedPasswordEdges `json:"edges"`
	task_cracked_passwords *uuid.UUID
}

// CrackedPasswordEdges holds the relations/edges for other nodes in the graph.
type CrackedPasswordEdges struct {
	// RelatedTask holds the value of the related_task edge.
	RelatedTask *Task `json:"related_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RelatedTaskOrErr returns the RelatedTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CrackedPasswordEdges) RelatedTaskOrErr() (*Task, error) {
	if e.loadedTypes[0] {
		if e.RelatedTask == nil {
			// The edge related_task was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: task.Label}
		}
		return e.RelatedTask, nil
	}
	return nil, &NotLoadedError{edge: "related_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CrackedPassword) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case crackedpassword.FieldHash, crackedpassword.FieldValue:
			values[i] = new(sql.NullString)
		case crackedpassword.FieldCrackedAt:
			values[i] = new(sql.NullTime)
		case crackedpassword.FieldID:
			values[i] = new(uuid.UUID)
		case crackedpassword.ForeignKeys[0]: // task_cracked_passwords
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type CrackedPassword", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CrackedPassword fields.
func (cp *CrackedPassword) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case crackedpassword.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				cp.ID = *value
			}
		case crackedpassword.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				cp.Hash = value.String
			}
		case crackedpassword.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				cp.Value = value.String
			}
		case crackedpassword.FieldCrackedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cracked_at", values[i])
			} else if value.Valid {
				cp.CrackedAt = value.Time
			}
		case crackedpassword.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field task_cracked_passwords", values[i])
			} else if value.Valid {
				cp.task_cracked_passwords = new(uuid.UUID)
				*cp.task_cracked_passwords = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryRelatedTask queries the "related_task" edge of the CrackedPassword entity.
func (cp *CrackedPassword) QueryRelatedTask() *TaskQuery {
	return (&CrackedPasswordClient{config: cp.config}).QueryRelatedTask(cp)
}

// Update returns a builder for updating this CrackedPassword.
// Note that you need to call CrackedPassword.Unwrap() before calling this method if this CrackedPassword
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CrackedPassword) Update() *CrackedPasswordUpdateOne {
	return (&CrackedPasswordClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CrackedPassword entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CrackedPassword) Unwrap() *CrackedPassword {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CrackedPassword is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CrackedPassword) String() string {
	var builder strings.Builder
	builder.WriteString("CrackedPassword(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", hash=")
	builder.WriteString(cp.Hash)
	builder.WriteString(", value=")
	builder.WriteString(cp.Value)
	builder.WriteString(", cracked_at=")
	builder.WriteString(cp.CrackedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CrackedPasswords is a parsable slice of CrackedPassword.
type CrackedPasswords []*CrackedPassword

func (cp CrackedPasswords) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
