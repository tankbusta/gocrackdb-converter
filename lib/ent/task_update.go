// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/predicate"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/user"
	"github.com/tankbusta/gocrackdb-converter/lib/oldschema"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TaskUpdate) SetStatus(os oldschema.TaskStatus) *TaskUpdate {
	tu.mutation.SetStatus(os)
	return tu
}

// SetEnginePayload sets the "engine_payload" field.
func (tu *TaskUpdate) SetEnginePayload(m map[string]interface{}) *TaskUpdate {
	tu.mutation.SetEnginePayload(m)
	return tu
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (tu *TaskUpdate) ClearEnginePayload() *TaskUpdate {
	tu.mutation.ClearEnginePayload()
	return tu
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (tu *TaskUpdate) SetAssignedToHost(s string) *TaskUpdate {
	tu.mutation.SetAssignedToHost(s)
	return tu
}

// SetNillableAssignedToHost sets the "assigned_to_host" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAssignedToHost(s *string) *TaskUpdate {
	if s != nil {
		tu.SetAssignedToHost(*s)
	}
	return tu
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (tu *TaskUpdate) ClearAssignedToHost() *TaskUpdate {
	tu.mutation.ClearAssignedToHost()
	return tu
}

// SetComment sets the "comment" field.
func (tu *TaskUpdate) SetComment(s string) *TaskUpdate {
	tu.mutation.SetComment(s)
	return tu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableComment(s *string) *TaskUpdate {
	if s != nil {
		tu.SetComment(*s)
	}
	return tu
}

// ClearComment clears the value of the "comment" field.
func (tu *TaskUpdate) ClearComment() *TaskUpdate {
	tu.mutation.ClearComment()
	return tu
}

// SetCaseCode sets the "case_code" field.
func (tu *TaskUpdate) SetCaseCode(s string) *TaskUpdate {
	tu.mutation.SetCaseCode(s)
	return tu
}

// SetNillableCaseCode sets the "case_code" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCaseCode(s *string) *TaskUpdate {
	if s != nil {
		tu.SetCaseCode(*s)
	}
	return tu
}

// ClearCaseCode clears the value of the "case_code" field.
func (tu *TaskUpdate) ClearCaseCode() *TaskUpdate {
	tu.mutation.ClearCaseCode()
	return tu
}

// SetNumberCracked sets the "number_cracked" field.
func (tu *TaskUpdate) SetNumberCracked(i int) *TaskUpdate {
	tu.mutation.ResetNumberCracked()
	tu.mutation.SetNumberCracked(i)
	return tu
}

// SetNillableNumberCracked sets the "number_cracked" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNumberCracked(i *int) *TaskUpdate {
	if i != nil {
		tu.SetNumberCracked(*i)
	}
	return tu
}

// AddNumberCracked adds i to the "number_cracked" field.
func (tu *TaskUpdate) AddNumberCracked(i int) *TaskUpdate {
	tu.mutation.AddNumberCracked(i)
	return tu
}

// SetNumberPasswords sets the "number_passwords" field.
func (tu *TaskUpdate) SetNumberPasswords(i int) *TaskUpdate {
	tu.mutation.ResetNumberPasswords()
	tu.mutation.SetNumberPasswords(i)
	return tu
}

// SetNillableNumberPasswords sets the "number_passwords" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNumberPasswords(i *int) *TaskUpdate {
	if i != nil {
		tu.SetNumberPasswords(*i)
	}
	return tu
}

// AddNumberPasswords adds i to the "number_passwords" field.
func (tu *TaskUpdate) AddNumberPasswords(i int) *TaskUpdate {
	tu.mutation.AddNumberPasswords(i)
	return tu
}

// SetError sets the "error" field.
func (tu *TaskUpdate) SetError(s string) *TaskUpdate {
	tu.mutation.SetError(s)
	return tu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableError(s *string) *TaskUpdate {
	if s != nil {
		tu.SetError(*s)
	}
	return tu
}

// ClearError clears the value of the "error" field.
func (tu *TaskUpdate) ClearError() *TaskUpdate {
	tu.mutation.ClearError()
	return tu
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (tu *TaskUpdate) SetCreatedByID(id uuid.UUID) *TaskUpdate {
	tu.mutation.SetCreatedByID(id)
	return tu
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tu *TaskUpdate) SetCreatedBy(u *User) *TaskUpdate {
	return tu.SetCreatedByID(u.ID)
}

// AddCrackedPasswordIDs adds the "cracked_passwords" edge to the CrackedPassword entity by IDs.
func (tu *TaskUpdate) AddCrackedPasswordIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.AddCrackedPasswordIDs(ids...)
	return tu
}

// AddCrackedPasswords adds the "cracked_passwords" edges to the CrackedPassword entity.
func (tu *TaskUpdate) AddCrackedPasswords(c ...*CrackedPassword) *TaskUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCrackedPasswordIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tu *TaskUpdate) ClearCreatedBy() *TaskUpdate {
	tu.mutation.ClearCreatedBy()
	return tu
}

// ClearCrackedPasswords clears all "cracked_passwords" edges to the CrackedPassword entity.
func (tu *TaskUpdate) ClearCrackedPasswords() *TaskUpdate {
	tu.mutation.ClearCrackedPasswords()
	return tu
}

// RemoveCrackedPasswordIDs removes the "cracked_passwords" edge to CrackedPassword entities by IDs.
func (tu *TaskUpdate) RemoveCrackedPasswordIDs(ids ...uuid.UUID) *TaskUpdate {
	tu.mutation.RemoveCrackedPasswordIDs(ids...)
	return tu
}

// RemoveCrackedPasswords removes "cracked_passwords" edges to CrackedPassword entities.
func (tu *TaskUpdate) RemoveCrackedPasswords(c ...*CrackedPassword) *TaskUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCrackedPasswordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tu.mutation.CreatedByID(); tu.mutation.CreatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.created_by"`)
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: task.FieldStatus,
		})
	}
	if value, ok := tu.mutation.EnginePayload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldEnginePayload,
		})
	}
	if tu.mutation.EnginePayloadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldEnginePayload,
		})
	}
	if value, ok := tu.mutation.AssignedToHost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldAssignedToHost,
		})
	}
	if tu.mutation.AssignedToHostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldAssignedToHost,
		})
	}
	if value, ok := tu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldComment,
		})
	}
	if tu.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldComment,
		})
	}
	if value, ok := tu.mutation.CaseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCaseCode,
		})
	}
	if tu.mutation.CaseCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCaseCode,
		})
	}
	if value, ok := tu.mutation.NumberCracked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberCracked,
		})
	}
	if value, ok := tu.mutation.AddedNumberCracked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberCracked,
		})
	}
	if value, ok := tu.mutation.NumberPasswords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberPasswords,
		})
	}
	if value, ok := tu.mutation.AddedNumberPasswords(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberPasswords,
		})
	}
	if value, ok := tu.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldError,
		})
	}
	if tu.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldError,
		})
	}
	if tu.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CrackedPasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCrackedPasswordsIDs(); len(nodes) > 0 && !tu.mutation.CrackedPasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CrackedPasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TaskUpdateOne) SetStatus(os oldschema.TaskStatus) *TaskUpdateOne {
	tuo.mutation.SetStatus(os)
	return tuo
}

// SetEnginePayload sets the "engine_payload" field.
func (tuo *TaskUpdateOne) SetEnginePayload(m map[string]interface{}) *TaskUpdateOne {
	tuo.mutation.SetEnginePayload(m)
	return tuo
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (tuo *TaskUpdateOne) ClearEnginePayload() *TaskUpdateOne {
	tuo.mutation.ClearEnginePayload()
	return tuo
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (tuo *TaskUpdateOne) SetAssignedToHost(s string) *TaskUpdateOne {
	tuo.mutation.SetAssignedToHost(s)
	return tuo
}

// SetNillableAssignedToHost sets the "assigned_to_host" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAssignedToHost(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetAssignedToHost(*s)
	}
	return tuo
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (tuo *TaskUpdateOne) ClearAssignedToHost() *TaskUpdateOne {
	tuo.mutation.ClearAssignedToHost()
	return tuo
}

// SetComment sets the "comment" field.
func (tuo *TaskUpdateOne) SetComment(s string) *TaskUpdateOne {
	tuo.mutation.SetComment(s)
	return tuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableComment(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetComment(*s)
	}
	return tuo
}

// ClearComment clears the value of the "comment" field.
func (tuo *TaskUpdateOne) ClearComment() *TaskUpdateOne {
	tuo.mutation.ClearComment()
	return tuo
}

// SetCaseCode sets the "case_code" field.
func (tuo *TaskUpdateOne) SetCaseCode(s string) *TaskUpdateOne {
	tuo.mutation.SetCaseCode(s)
	return tuo
}

// SetNillableCaseCode sets the "case_code" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCaseCode(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetCaseCode(*s)
	}
	return tuo
}

// ClearCaseCode clears the value of the "case_code" field.
func (tuo *TaskUpdateOne) ClearCaseCode() *TaskUpdateOne {
	tuo.mutation.ClearCaseCode()
	return tuo
}

// SetNumberCracked sets the "number_cracked" field.
func (tuo *TaskUpdateOne) SetNumberCracked(i int) *TaskUpdateOne {
	tuo.mutation.ResetNumberCracked()
	tuo.mutation.SetNumberCracked(i)
	return tuo
}

// SetNillableNumberCracked sets the "number_cracked" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNumberCracked(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetNumberCracked(*i)
	}
	return tuo
}

// AddNumberCracked adds i to the "number_cracked" field.
func (tuo *TaskUpdateOne) AddNumberCracked(i int) *TaskUpdateOne {
	tuo.mutation.AddNumberCracked(i)
	return tuo
}

// SetNumberPasswords sets the "number_passwords" field.
func (tuo *TaskUpdateOne) SetNumberPasswords(i int) *TaskUpdateOne {
	tuo.mutation.ResetNumberPasswords()
	tuo.mutation.SetNumberPasswords(i)
	return tuo
}

// SetNillableNumberPasswords sets the "number_passwords" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNumberPasswords(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetNumberPasswords(*i)
	}
	return tuo
}

// AddNumberPasswords adds i to the "number_passwords" field.
func (tuo *TaskUpdateOne) AddNumberPasswords(i int) *TaskUpdateOne {
	tuo.mutation.AddNumberPasswords(i)
	return tuo
}

// SetError sets the "error" field.
func (tuo *TaskUpdateOne) SetError(s string) *TaskUpdateOne {
	tuo.mutation.SetError(s)
	return tuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableError(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetError(*s)
	}
	return tuo
}

// ClearError clears the value of the "error" field.
func (tuo *TaskUpdateOne) ClearError() *TaskUpdateOne {
	tuo.mutation.ClearError()
	return tuo
}

// SetCreatedByID sets the "created_by" edge to the User entity by ID.
func (tuo *TaskUpdateOne) SetCreatedByID(id uuid.UUID) *TaskUpdateOne {
	tuo.mutation.SetCreatedByID(id)
	return tuo
}

// SetCreatedBy sets the "created_by" edge to the User entity.
func (tuo *TaskUpdateOne) SetCreatedBy(u *User) *TaskUpdateOne {
	return tuo.SetCreatedByID(u.ID)
}

// AddCrackedPasswordIDs adds the "cracked_passwords" edge to the CrackedPassword entity by IDs.
func (tuo *TaskUpdateOne) AddCrackedPasswordIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.AddCrackedPasswordIDs(ids...)
	return tuo
}

// AddCrackedPasswords adds the "cracked_passwords" edges to the CrackedPassword entity.
func (tuo *TaskUpdateOne) AddCrackedPasswords(c ...*CrackedPassword) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCrackedPasswordIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (tuo *TaskUpdateOne) ClearCreatedBy() *TaskUpdateOne {
	tuo.mutation.ClearCreatedBy()
	return tuo
}

// ClearCrackedPasswords clears all "cracked_passwords" edges to the CrackedPassword entity.
func (tuo *TaskUpdateOne) ClearCrackedPasswords() *TaskUpdateOne {
	tuo.mutation.ClearCrackedPasswords()
	return tuo
}

// RemoveCrackedPasswordIDs removes the "cracked_passwords" edge to CrackedPassword entities by IDs.
func (tuo *TaskUpdateOne) RemoveCrackedPasswordIDs(ids ...uuid.UUID) *TaskUpdateOne {
	tuo.mutation.RemoveCrackedPasswordIDs(ids...)
	return tuo
}

// RemoveCrackedPasswords removes "cracked_passwords" edges to CrackedPassword entities.
func (tuo *TaskUpdateOne) RemoveCrackedPasswords(c ...*CrackedPassword) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCrackedPasswordIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Status(); ok {
		if err := task.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Task.status": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.CreatedByID(); tuo.mutation.CreatedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Task.created_by"`)
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldName,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: task.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.EnginePayload(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: task.FieldEnginePayload,
		})
	}
	if tuo.mutation.EnginePayloadCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: task.FieldEnginePayload,
		})
	}
	if value, ok := tuo.mutation.AssignedToHost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldAssignedToHost,
		})
	}
	if tuo.mutation.AssignedToHostCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldAssignedToHost,
		})
	}
	if value, ok := tuo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldComment,
		})
	}
	if tuo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldComment,
		})
	}
	if value, ok := tuo.mutation.CaseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldCaseCode,
		})
	}
	if tuo.mutation.CaseCodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldCaseCode,
		})
	}
	if value, ok := tuo.mutation.NumberCracked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberCracked,
		})
	}
	if value, ok := tuo.mutation.AddedNumberCracked(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberCracked,
		})
	}
	if value, ok := tuo.mutation.NumberPasswords(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberPasswords,
		})
	}
	if value, ok := tuo.mutation.AddedNumberPasswords(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: task.FieldNumberPasswords,
		})
	}
	if value, ok := tuo.mutation.Error(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldError,
		})
	}
	if tuo.mutation.ErrorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldError,
		})
	}
	if tuo.mutation.CreatedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CreatedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   task.CreatedByTable,
			Columns: []string{task.CreatedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CrackedPasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCrackedPasswordsIDs(); len(nodes) > 0 && !tuo.mutation.CrackedPasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CrackedPasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CrackedPasswordsTable,
			Columns: []string{task.CrackedPasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: crackedpassword.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
