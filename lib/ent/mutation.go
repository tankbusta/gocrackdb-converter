// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/predicate"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/user"
	"github.com/tankbusta/gocrackdb-converter/lib/oldschema"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCrackedPassword = "CrackedPassword"
	TypeTask            = "Task"
	TypeUser            = "User"
)

// CrackedPasswordMutation represents an operation that mutates the CrackedPassword nodes in the graph.
type CrackedPasswordMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	hash                *string
	value               *string
	cracked_at          *time.Time
	clearedFields       map[string]struct{}
	related_task        *uuid.UUID
	clearedrelated_task bool
	done                bool
	oldValue            func(context.Context) (*CrackedPassword, error)
	predicates          []predicate.CrackedPassword
}

var _ ent.Mutation = (*CrackedPasswordMutation)(nil)

// crackedpasswordOption allows management of the mutation configuration using functional options.
type crackedpasswordOption func(*CrackedPasswordMutation)

// newCrackedPasswordMutation creates new mutation for the CrackedPassword entity.
func newCrackedPasswordMutation(c config, op Op, opts ...crackedpasswordOption) *CrackedPasswordMutation {
	m := &CrackedPasswordMutation{
		config:        c,
		op:            op,
		typ:           TypeCrackedPassword,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCrackedPasswordID sets the ID field of the mutation.
func withCrackedPasswordID(id uuid.UUID) crackedpasswordOption {
	return func(m *CrackedPasswordMutation) {
		var (
			err   error
			once  sync.Once
			value *CrackedPassword
		)
		m.oldValue = func(ctx context.Context) (*CrackedPassword, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CrackedPassword.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCrackedPassword sets the old CrackedPassword of the mutation.
func withCrackedPassword(node *CrackedPassword) crackedpasswordOption {
	return func(m *CrackedPasswordMutation) {
		m.oldValue = func(context.Context) (*CrackedPassword, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CrackedPasswordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CrackedPasswordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CrackedPassword entities.
func (m *CrackedPasswordMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CrackedPasswordMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CrackedPasswordMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CrackedPassword.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHash sets the "hash" field.
func (m *CrackedPasswordMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *CrackedPasswordMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the CrackedPassword entity.
// If the CrackedPassword object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrackedPasswordMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *CrackedPasswordMutation) ResetHash() {
	m.hash = nil
}

// SetValue sets the "value" field.
func (m *CrackedPasswordMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *CrackedPasswordMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the CrackedPassword entity.
// If the CrackedPassword object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrackedPasswordMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *CrackedPasswordMutation) ResetValue() {
	m.value = nil
}

// SetCrackedAt sets the "cracked_at" field.
func (m *CrackedPasswordMutation) SetCrackedAt(t time.Time) {
	m.cracked_at = &t
}

// CrackedAt returns the value of the "cracked_at" field in the mutation.
func (m *CrackedPasswordMutation) CrackedAt() (r time.Time, exists bool) {
	v := m.cracked_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCrackedAt returns the old "cracked_at" field's value of the CrackedPassword entity.
// If the CrackedPassword object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CrackedPasswordMutation) OldCrackedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCrackedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCrackedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCrackedAt: %w", err)
	}
	return oldValue.CrackedAt, nil
}

// ResetCrackedAt resets all changes to the "cracked_at" field.
func (m *CrackedPasswordMutation) ResetCrackedAt() {
	m.cracked_at = nil
}

// SetRelatedTaskID sets the "related_task" edge to the Task entity by id.
func (m *CrackedPasswordMutation) SetRelatedTaskID(id uuid.UUID) {
	m.related_task = &id
}

// ClearRelatedTask clears the "related_task" edge to the Task entity.
func (m *CrackedPasswordMutation) ClearRelatedTask() {
	m.clearedrelated_task = true
}

// RelatedTaskCleared reports if the "related_task" edge to the Task entity was cleared.
func (m *CrackedPasswordMutation) RelatedTaskCleared() bool {
	return m.clearedrelated_task
}

// RelatedTaskID returns the "related_task" edge ID in the mutation.
func (m *CrackedPasswordMutation) RelatedTaskID() (id uuid.UUID, exists bool) {
	if m.related_task != nil {
		return *m.related_task, true
	}
	return
}

// RelatedTaskIDs returns the "related_task" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelatedTaskID instead. It exists only for internal usage by the builders.
func (m *CrackedPasswordMutation) RelatedTaskIDs() (ids []uuid.UUID) {
	if id := m.related_task; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelatedTask resets all changes to the "related_task" edge.
func (m *CrackedPasswordMutation) ResetRelatedTask() {
	m.related_task = nil
	m.clearedrelated_task = false
}

// Where appends a list predicates to the CrackedPasswordMutation builder.
func (m *CrackedPasswordMutation) Where(ps ...predicate.CrackedPassword) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CrackedPasswordMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CrackedPassword).
func (m *CrackedPasswordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CrackedPasswordMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.hash != nil {
		fields = append(fields, crackedpassword.FieldHash)
	}
	if m.value != nil {
		fields = append(fields, crackedpassword.FieldValue)
	}
	if m.cracked_at != nil {
		fields = append(fields, crackedpassword.FieldCrackedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CrackedPasswordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case crackedpassword.FieldHash:
		return m.Hash()
	case crackedpassword.FieldValue:
		return m.Value()
	case crackedpassword.FieldCrackedAt:
		return m.CrackedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CrackedPasswordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case crackedpassword.FieldHash:
		return m.OldHash(ctx)
	case crackedpassword.FieldValue:
		return m.OldValue(ctx)
	case crackedpassword.FieldCrackedAt:
		return m.OldCrackedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CrackedPassword field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CrackedPasswordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case crackedpassword.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case crackedpassword.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case crackedpassword.FieldCrackedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCrackedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CrackedPassword field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CrackedPasswordMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CrackedPasswordMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CrackedPasswordMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CrackedPassword numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CrackedPasswordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CrackedPasswordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CrackedPasswordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CrackedPassword nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CrackedPasswordMutation) ResetField(name string) error {
	switch name {
	case crackedpassword.FieldHash:
		m.ResetHash()
		return nil
	case crackedpassword.FieldValue:
		m.ResetValue()
		return nil
	case crackedpassword.FieldCrackedAt:
		m.ResetCrackedAt()
		return nil
	}
	return fmt.Errorf("unknown CrackedPassword field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CrackedPasswordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.related_task != nil {
		edges = append(edges, crackedpassword.EdgeRelatedTask)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CrackedPasswordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case crackedpassword.EdgeRelatedTask:
		if id := m.related_task; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CrackedPasswordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CrackedPasswordMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CrackedPasswordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrelated_task {
		edges = append(edges, crackedpassword.EdgeRelatedTask)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CrackedPasswordMutation) EdgeCleared(name string) bool {
	switch name {
	case crackedpassword.EdgeRelatedTask:
		return m.clearedrelated_task
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CrackedPasswordMutation) ClearEdge(name string) error {
	switch name {
	case crackedpassword.EdgeRelatedTask:
		m.ClearRelatedTask()
		return nil
	}
	return fmt.Errorf("unknown CrackedPassword unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CrackedPasswordMutation) ResetEdge(name string) error {
	switch name {
	case crackedpassword.EdgeRelatedTask:
		m.ResetRelatedTask()
		return nil
	}
	return fmt.Errorf("unknown CrackedPassword edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	name                     *string
	status                   *oldschema.TaskStatus
	engine_payload           *map[string]interface{}
	created_at               *time.Time
	last_updated_at          *time.Time
	assigned_to_host         *string
	comment                  *string
	case_code                *string
	number_cracked           *int
	addnumber_cracked        *int
	number_passwords         *int
	addnumber_passwords      *int
	error                    *string
	clearedFields            map[string]struct{}
	created_by               *uuid.UUID
	clearedcreated_by        bool
	cracked_passwords        map[uuid.UUID]struct{}
	removedcracked_passwords map[uuid.UUID]struct{}
	clearedcracked_passwords bool
	done                     bool
	oldValue                 func(context.Context) (*Task, error)
	predicates               []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TaskMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TaskMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TaskMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(os oldschema.TaskStatus) {
	m.status = &os
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r oldschema.TaskStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v oldschema.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
}

// SetEnginePayload sets the "engine_payload" field.
func (m *TaskMutation) SetEnginePayload(value map[string]interface{}) {
	m.engine_payload = &value
}

// EnginePayload returns the value of the "engine_payload" field in the mutation.
func (m *TaskMutation) EnginePayload() (r map[string]interface{}, exists bool) {
	v := m.engine_payload
	if v == nil {
		return
	}
	return *v, true
}

// OldEnginePayload returns the old "engine_payload" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldEnginePayload(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnginePayload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnginePayload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnginePayload: %w", err)
	}
	return oldValue.EnginePayload, nil
}

// ClearEnginePayload clears the value of the "engine_payload" field.
func (m *TaskMutation) ClearEnginePayload() {
	m.engine_payload = nil
	m.clearedFields[task.FieldEnginePayload] = struct{}{}
}

// EnginePayloadCleared returns if the "engine_payload" field was cleared in this mutation.
func (m *TaskMutation) EnginePayloadCleared() bool {
	_, ok := m.clearedFields[task.FieldEnginePayload]
	return ok
}

// ResetEnginePayload resets all changes to the "engine_payload" field.
func (m *TaskMutation) ResetEnginePayload() {
	m.engine_payload = nil
	delete(m.clearedFields, task.FieldEnginePayload)
}

// SetCreatedAt sets the "created_at" field.
func (m *TaskMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TaskMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TaskMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetLastUpdatedAt sets the "last_updated_at" field.
func (m *TaskMutation) SetLastUpdatedAt(t time.Time) {
	m.last_updated_at = &t
}

// LastUpdatedAt returns the value of the "last_updated_at" field in the mutation.
func (m *TaskMutation) LastUpdatedAt() (r time.Time, exists bool) {
	v := m.last_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdatedAt returns the old "last_updated_at" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldLastUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdatedAt: %w", err)
	}
	return oldValue.LastUpdatedAt, nil
}

// ResetLastUpdatedAt resets all changes to the "last_updated_at" field.
func (m *TaskMutation) ResetLastUpdatedAt() {
	m.last_updated_at = nil
}

// SetAssignedToHost sets the "assigned_to_host" field.
func (m *TaskMutation) SetAssignedToHost(s string) {
	m.assigned_to_host = &s
}

// AssignedToHost returns the value of the "assigned_to_host" field in the mutation.
func (m *TaskMutation) AssignedToHost() (r string, exists bool) {
	v := m.assigned_to_host
	if v == nil {
		return
	}
	return *v, true
}

// OldAssignedToHost returns the old "assigned_to_host" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAssignedToHost(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssignedToHost is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssignedToHost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssignedToHost: %w", err)
	}
	return oldValue.AssignedToHost, nil
}

// ClearAssignedToHost clears the value of the "assigned_to_host" field.
func (m *TaskMutation) ClearAssignedToHost() {
	m.assigned_to_host = nil
	m.clearedFields[task.FieldAssignedToHost] = struct{}{}
}

// AssignedToHostCleared returns if the "assigned_to_host" field was cleared in this mutation.
func (m *TaskMutation) AssignedToHostCleared() bool {
	_, ok := m.clearedFields[task.FieldAssignedToHost]
	return ok
}

// ResetAssignedToHost resets all changes to the "assigned_to_host" field.
func (m *TaskMutation) ResetAssignedToHost() {
	m.assigned_to_host = nil
	delete(m.clearedFields, task.FieldAssignedToHost)
}

// SetComment sets the "comment" field.
func (m *TaskMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *TaskMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComment: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *TaskMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[task.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *TaskMutation) CommentCleared() bool {
	_, ok := m.clearedFields[task.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *TaskMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, task.FieldComment)
}

// SetCaseCode sets the "case_code" field.
func (m *TaskMutation) SetCaseCode(s string) {
	m.case_code = &s
}

// CaseCode returns the value of the "case_code" field in the mutation.
func (m *TaskMutation) CaseCode() (r string, exists bool) {
	v := m.case_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCaseCode returns the old "case_code" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCaseCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCaseCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCaseCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCaseCode: %w", err)
	}
	return oldValue.CaseCode, nil
}

// ClearCaseCode clears the value of the "case_code" field.
func (m *TaskMutation) ClearCaseCode() {
	m.case_code = nil
	m.clearedFields[task.FieldCaseCode] = struct{}{}
}

// CaseCodeCleared returns if the "case_code" field was cleared in this mutation.
func (m *TaskMutation) CaseCodeCleared() bool {
	_, ok := m.clearedFields[task.FieldCaseCode]
	return ok
}

// ResetCaseCode resets all changes to the "case_code" field.
func (m *TaskMutation) ResetCaseCode() {
	m.case_code = nil
	delete(m.clearedFields, task.FieldCaseCode)
}

// SetNumberCracked sets the "number_cracked" field.
func (m *TaskMutation) SetNumberCracked(i int) {
	m.number_cracked = &i
	m.addnumber_cracked = nil
}

// NumberCracked returns the value of the "number_cracked" field in the mutation.
func (m *TaskMutation) NumberCracked() (r int, exists bool) {
	v := m.number_cracked
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberCracked returns the old "number_cracked" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldNumberCracked(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberCracked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberCracked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberCracked: %w", err)
	}
	return oldValue.NumberCracked, nil
}

// AddNumberCracked adds i to the "number_cracked" field.
func (m *TaskMutation) AddNumberCracked(i int) {
	if m.addnumber_cracked != nil {
		*m.addnumber_cracked += i
	} else {
		m.addnumber_cracked = &i
	}
}

// AddedNumberCracked returns the value that was added to the "number_cracked" field in this mutation.
func (m *TaskMutation) AddedNumberCracked() (r int, exists bool) {
	v := m.addnumber_cracked
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberCracked resets all changes to the "number_cracked" field.
func (m *TaskMutation) ResetNumberCracked() {
	m.number_cracked = nil
	m.addnumber_cracked = nil
}

// SetNumberPasswords sets the "number_passwords" field.
func (m *TaskMutation) SetNumberPasswords(i int) {
	m.number_passwords = &i
	m.addnumber_passwords = nil
}

// NumberPasswords returns the value of the "number_passwords" field in the mutation.
func (m *TaskMutation) NumberPasswords() (r int, exists bool) {
	v := m.number_passwords
	if v == nil {
		return
	}
	return *v, true
}

// OldNumberPasswords returns the old "number_passwords" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldNumberPasswords(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumberPasswords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumberPasswords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumberPasswords: %w", err)
	}
	return oldValue.NumberPasswords, nil
}

// AddNumberPasswords adds i to the "number_passwords" field.
func (m *TaskMutation) AddNumberPasswords(i int) {
	if m.addnumber_passwords != nil {
		*m.addnumber_passwords += i
	} else {
		m.addnumber_passwords = &i
	}
}

// AddedNumberPasswords returns the value that was added to the "number_passwords" field in this mutation.
func (m *TaskMutation) AddedNumberPasswords() (r int, exists bool) {
	v := m.addnumber_passwords
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumberPasswords resets all changes to the "number_passwords" field.
func (m *TaskMutation) ResetNumberPasswords() {
	m.number_passwords = nil
	m.addnumber_passwords = nil
}

// SetError sets the "error" field.
func (m *TaskMutation) SetError(s string) {
	m.error = &s
}

// Error returns the value of the "error" field in the mutation.
func (m *TaskMutation) Error() (r string, exists bool) {
	v := m.error
	if v == nil {
		return
	}
	return *v, true
}

// OldError returns the old "error" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldError(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldError is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldError requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldError: %w", err)
	}
	return oldValue.Error, nil
}

// ClearError clears the value of the "error" field.
func (m *TaskMutation) ClearError() {
	m.error = nil
	m.clearedFields[task.FieldError] = struct{}{}
}

// ErrorCleared returns if the "error" field was cleared in this mutation.
func (m *TaskMutation) ErrorCleared() bool {
	_, ok := m.clearedFields[task.FieldError]
	return ok
}

// ResetError resets all changes to the "error" field.
func (m *TaskMutation) ResetError() {
	m.error = nil
	delete(m.clearedFields, task.FieldError)
}

// SetCreatedByID sets the "created_by" edge to the User entity by id.
func (m *TaskMutation) SetCreatedByID(id uuid.UUID) {
	m.created_by = &id
}

// ClearCreatedBy clears the "created_by" edge to the User entity.
func (m *TaskMutation) ClearCreatedBy() {
	m.clearedcreated_by = true
}

// CreatedByCleared reports if the "created_by" edge to the User entity was cleared.
func (m *TaskMutation) CreatedByCleared() bool {
	return m.clearedcreated_by
}

// CreatedByID returns the "created_by" edge ID in the mutation.
func (m *TaskMutation) CreatedByID() (id uuid.UUID, exists bool) {
	if m.created_by != nil {
		return *m.created_by, true
	}
	return
}

// CreatedByIDs returns the "created_by" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CreatedByID instead. It exists only for internal usage by the builders.
func (m *TaskMutation) CreatedByIDs() (ids []uuid.UUID) {
	if id := m.created_by; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCreatedBy resets all changes to the "created_by" edge.
func (m *TaskMutation) ResetCreatedBy() {
	m.created_by = nil
	m.clearedcreated_by = false
}

// AddCrackedPasswordIDs adds the "cracked_passwords" edge to the CrackedPassword entity by ids.
func (m *TaskMutation) AddCrackedPasswordIDs(ids ...uuid.UUID) {
	if m.cracked_passwords == nil {
		m.cracked_passwords = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.cracked_passwords[ids[i]] = struct{}{}
	}
}

// ClearCrackedPasswords clears the "cracked_passwords" edge to the CrackedPassword entity.
func (m *TaskMutation) ClearCrackedPasswords() {
	m.clearedcracked_passwords = true
}

// CrackedPasswordsCleared reports if the "cracked_passwords" edge to the CrackedPassword entity was cleared.
func (m *TaskMutation) CrackedPasswordsCleared() bool {
	return m.clearedcracked_passwords
}

// RemoveCrackedPasswordIDs removes the "cracked_passwords" edge to the CrackedPassword entity by IDs.
func (m *TaskMutation) RemoveCrackedPasswordIDs(ids ...uuid.UUID) {
	if m.removedcracked_passwords == nil {
		m.removedcracked_passwords = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.cracked_passwords, ids[i])
		m.removedcracked_passwords[ids[i]] = struct{}{}
	}
}

// RemovedCrackedPasswords returns the removed IDs of the "cracked_passwords" edge to the CrackedPassword entity.
func (m *TaskMutation) RemovedCrackedPasswordsIDs() (ids []uuid.UUID) {
	for id := range m.removedcracked_passwords {
		ids = append(ids, id)
	}
	return
}

// CrackedPasswordsIDs returns the "cracked_passwords" edge IDs in the mutation.
func (m *TaskMutation) CrackedPasswordsIDs() (ids []uuid.UUID) {
	for id := range m.cracked_passwords {
		ids = append(ids, id)
	}
	return
}

// ResetCrackedPasswords resets all changes to the "cracked_passwords" edge.
func (m *TaskMutation) ResetCrackedPasswords() {
	m.cracked_passwords = nil
	m.clearedcracked_passwords = false
	m.removedcracked_passwords = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, task.FieldName)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.engine_payload != nil {
		fields = append(fields, task.FieldEnginePayload)
	}
	if m.created_at != nil {
		fields = append(fields, task.FieldCreatedAt)
	}
	if m.last_updated_at != nil {
		fields = append(fields, task.FieldLastUpdatedAt)
	}
	if m.assigned_to_host != nil {
		fields = append(fields, task.FieldAssignedToHost)
	}
	if m.comment != nil {
		fields = append(fields, task.FieldComment)
	}
	if m.case_code != nil {
		fields = append(fields, task.FieldCaseCode)
	}
	if m.number_cracked != nil {
		fields = append(fields, task.FieldNumberCracked)
	}
	if m.number_passwords != nil {
		fields = append(fields, task.FieldNumberPasswords)
	}
	if m.error != nil {
		fields = append(fields, task.FieldError)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldName:
		return m.Name()
	case task.FieldStatus:
		return m.Status()
	case task.FieldEnginePayload:
		return m.EnginePayload()
	case task.FieldCreatedAt:
		return m.CreatedAt()
	case task.FieldLastUpdatedAt:
		return m.LastUpdatedAt()
	case task.FieldAssignedToHost:
		return m.AssignedToHost()
	case task.FieldComment:
		return m.Comment()
	case task.FieldCaseCode:
		return m.CaseCode()
	case task.FieldNumberCracked:
		return m.NumberCracked()
	case task.FieldNumberPasswords:
		return m.NumberPasswords()
	case task.FieldError:
		return m.Error()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldName:
		return m.OldName(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldEnginePayload:
		return m.OldEnginePayload(ctx)
	case task.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case task.FieldLastUpdatedAt:
		return m.OldLastUpdatedAt(ctx)
	case task.FieldAssignedToHost:
		return m.OldAssignedToHost(ctx)
	case task.FieldComment:
		return m.OldComment(ctx)
	case task.FieldCaseCode:
		return m.OldCaseCode(ctx)
	case task.FieldNumberCracked:
		return m.OldNumberCracked(ctx)
	case task.FieldNumberPasswords:
		return m.OldNumberPasswords(ctx)
	case task.FieldError:
		return m.OldError(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(oldschema.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldEnginePayload:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnginePayload(v)
		return nil
	case task.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case task.FieldLastUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdatedAt(v)
		return nil
	case task.FieldAssignedToHost:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssignedToHost(v)
		return nil
	case task.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComment(v)
		return nil
	case task.FieldCaseCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCaseCode(v)
		return nil
	case task.FieldNumberCracked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberCracked(v)
		return nil
	case task.FieldNumberPasswords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumberPasswords(v)
		return nil
	case task.FieldError:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetError(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addnumber_cracked != nil {
		fields = append(fields, task.FieldNumberCracked)
	}
	if m.addnumber_passwords != nil {
		fields = append(fields, task.FieldNumberPasswords)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldNumberCracked:
		return m.AddedNumberCracked()
	case task.FieldNumberPasswords:
		return m.AddedNumberPasswords()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldNumberCracked:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberCracked(v)
		return nil
	case task.FieldNumberPasswords:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumberPasswords(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldEnginePayload) {
		fields = append(fields, task.FieldEnginePayload)
	}
	if m.FieldCleared(task.FieldAssignedToHost) {
		fields = append(fields, task.FieldAssignedToHost)
	}
	if m.FieldCleared(task.FieldComment) {
		fields = append(fields, task.FieldComment)
	}
	if m.FieldCleared(task.FieldCaseCode) {
		fields = append(fields, task.FieldCaseCode)
	}
	if m.FieldCleared(task.FieldError) {
		fields = append(fields, task.FieldError)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldEnginePayload:
		m.ClearEnginePayload()
		return nil
	case task.FieldAssignedToHost:
		m.ClearAssignedToHost()
		return nil
	case task.FieldComment:
		m.ClearComment()
		return nil
	case task.FieldCaseCode:
		m.ClearCaseCode()
		return nil
	case task.FieldError:
		m.ClearError()
		return nil
	}
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldName:
		m.ResetName()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldEnginePayload:
		m.ResetEnginePayload()
		return nil
	case task.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case task.FieldLastUpdatedAt:
		m.ResetLastUpdatedAt()
		return nil
	case task.FieldAssignedToHost:
		m.ResetAssignedToHost()
		return nil
	case task.FieldComment:
		m.ResetComment()
		return nil
	case task.FieldCaseCode:
		m.ResetCaseCode()
		return nil
	case task.FieldNumberCracked:
		m.ResetNumberCracked()
		return nil
	case task.FieldNumberPasswords:
		m.ResetNumberPasswords()
		return nil
	case task.FieldError:
		m.ResetError()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.created_by != nil {
		edges = append(edges, task.EdgeCreatedBy)
	}
	if m.cracked_passwords != nil {
		edges = append(edges, task.EdgeCrackedPasswords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeCreatedBy:
		if id := m.created_by; id != nil {
			return []ent.Value{*id}
		}
	case task.EdgeCrackedPasswords:
		ids := make([]ent.Value, 0, len(m.cracked_passwords))
		for id := range m.cracked_passwords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcracked_passwords != nil {
		edges = append(edges, task.EdgeCrackedPasswords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case task.EdgeCrackedPasswords:
		ids := make([]ent.Value, 0, len(m.removedcracked_passwords))
		for id := range m.removedcracked_passwords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcreated_by {
		edges = append(edges, task.EdgeCreatedBy)
	}
	if m.clearedcracked_passwords {
		edges = append(edges, task.EdgeCrackedPasswords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	switch name {
	case task.EdgeCreatedBy:
		return m.clearedcreated_by
	case task.EdgeCrackedPasswords:
		return m.clearedcracked_passwords
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	switch name {
	case task.EdgeCreatedBy:
		m.ClearCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	switch name {
	case task.EdgeCreatedBy:
		m.ResetCreatedBy()
		return nil
	case task.EdgeCrackedPasswords:
		m.ResetCrackedPasswords()
		return nil
	}
	return fmt.Errorf("unknown Task edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	username             *string
	enabled              *bool
	email_address        *string
	is_super_user        *bool
	created_at           *time.Time
	clearedFields        map[string]struct{}
	created_tasks        map[uuid.UUID]struct{}
	removedcreated_tasks map[uuid.UUID]struct{}
	clearedcreated_tasks bool
	done                 bool
	oldValue             func(context.Context) (*User, error)
	predicates           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEnabled sets the "enabled" field.
func (m *UserMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *UserMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *UserMutation) ResetEnabled() {
	m.enabled = nil
}

// SetEmailAddress sets the "email_address" field.
func (m *UserMutation) SetEmailAddress(s string) {
	m.email_address = &s
}

// EmailAddress returns the value of the "email_address" field in the mutation.
func (m *UserMutation) EmailAddress() (r string, exists bool) {
	v := m.email_address
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAddress returns the old "email_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAddress: %w", err)
	}
	return oldValue.EmailAddress, nil
}

// ResetEmailAddress resets all changes to the "email_address" field.
func (m *UserMutation) ResetEmailAddress() {
	m.email_address = nil
}

// SetIsSuperUser sets the "is_super_user" field.
func (m *UserMutation) SetIsSuperUser(b bool) {
	m.is_super_user = &b
}

// IsSuperUser returns the value of the "is_super_user" field in the mutation.
func (m *UserMutation) IsSuperUser() (r bool, exists bool) {
	v := m.is_super_user
	if v == nil {
		return
	}
	return *v, true
}

// OldIsSuperUser returns the old "is_super_user" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsSuperUser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsSuperUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsSuperUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsSuperUser: %w", err)
	}
	return oldValue.IsSuperUser, nil
}

// ResetIsSuperUser resets all changes to the "is_super_user" field.
func (m *UserMutation) ResetIsSuperUser() {
	m.is_super_user = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCreatedTaskIDs adds the "created_tasks" edge to the Task entity by ids.
func (m *UserMutation) AddCreatedTaskIDs(ids ...uuid.UUID) {
	if m.created_tasks == nil {
		m.created_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.created_tasks[ids[i]] = struct{}{}
	}
}

// ClearCreatedTasks clears the "created_tasks" edge to the Task entity.
func (m *UserMutation) ClearCreatedTasks() {
	m.clearedcreated_tasks = true
}

// CreatedTasksCleared reports if the "created_tasks" edge to the Task entity was cleared.
func (m *UserMutation) CreatedTasksCleared() bool {
	return m.clearedcreated_tasks
}

// RemoveCreatedTaskIDs removes the "created_tasks" edge to the Task entity by IDs.
func (m *UserMutation) RemoveCreatedTaskIDs(ids ...uuid.UUID) {
	if m.removedcreated_tasks == nil {
		m.removedcreated_tasks = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.created_tasks, ids[i])
		m.removedcreated_tasks[ids[i]] = struct{}{}
	}
}

// RemovedCreatedTasks returns the removed IDs of the "created_tasks" edge to the Task entity.
func (m *UserMutation) RemovedCreatedTasksIDs() (ids []uuid.UUID) {
	for id := range m.removedcreated_tasks {
		ids = append(ids, id)
	}
	return
}

// CreatedTasksIDs returns the "created_tasks" edge IDs in the mutation.
func (m *UserMutation) CreatedTasksIDs() (ids []uuid.UUID) {
	for id := range m.created_tasks {
		ids = append(ids, id)
	}
	return
}

// ResetCreatedTasks resets all changes to the "created_tasks" edge.
func (m *UserMutation) ResetCreatedTasks() {
	m.created_tasks = nil
	m.clearedcreated_tasks = false
	m.removedcreated_tasks = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.enabled != nil {
		fields = append(fields, user.FieldEnabled)
	}
	if m.email_address != nil {
		fields = append(fields, user.FieldEmailAddress)
	}
	if m.is_super_user != nil {
		fields = append(fields, user.FieldIsSuperUser)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEnabled:
		return m.Enabled()
	case user.FieldEmailAddress:
		return m.EmailAddress()
	case user.FieldIsSuperUser:
		return m.IsSuperUser()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEnabled:
		return m.OldEnabled(ctx)
	case user.FieldEmailAddress:
		return m.OldEmailAddress(ctx)
	case user.FieldIsSuperUser:
		return m.OldIsSuperUser(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case user.FieldEmailAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAddress(v)
		return nil
	case user.FieldIsSuperUser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsSuperUser(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEnabled:
		m.ResetEnabled()
		return nil
	case user.FieldEmailAddress:
		m.ResetEmailAddress()
		return nil
	case user.FieldIsSuperUser:
		m.ResetIsSuperUser()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.created_tasks != nil {
		edges = append(edges, user.EdgeCreatedTasks)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedTasks:
		ids := make([]ent.Value, 0, len(m.created_tasks))
		for id := range m.created_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcreated_tasks != nil {
		edges = append(edges, user.EdgeCreatedTasks)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeCreatedTasks:
		ids := make([]ent.Value, 0, len(m.removedcreated_tasks))
		for id := range m.removedcreated_tasks {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcreated_tasks {
		edges = append(edges, user.EdgeCreatedTasks)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeCreatedTasks:
		return m.clearedcreated_tasks
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeCreatedTasks:
		m.ResetCreatedTasks()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
