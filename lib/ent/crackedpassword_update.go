// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/crackedpassword"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/predicate"
	"github.com/tankbusta/gocrackdb-converter/lib/ent/task"
)

// CrackedPasswordUpdate is the builder for updating CrackedPassword entities.
type CrackedPasswordUpdate struct {
	config
	hooks    []Hook
	mutation *CrackedPasswordMutation
}

// Where appends a list predicates to the CrackedPasswordUpdate builder.
func (cpu *CrackedPasswordUpdate) Where(ps ...predicate.CrackedPassword) *CrackedPasswordUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetHash sets the "hash" field.
func (cpu *CrackedPasswordUpdate) SetHash(s string) *CrackedPasswordUpdate {
	cpu.mutation.SetHash(s)
	return cpu
}

// SetValue sets the "value" field.
func (cpu *CrackedPasswordUpdate) SetValue(s string) *CrackedPasswordUpdate {
	cpu.mutation.SetValue(s)
	return cpu
}

// SetRelatedTaskID sets the "related_task" edge to the Task entity by ID.
func (cpu *CrackedPasswordUpdate) SetRelatedTaskID(id uuid.UUID) *CrackedPasswordUpdate {
	cpu.mutation.SetRelatedTaskID(id)
	return cpu
}

// SetRelatedTask sets the "related_task" edge to the Task entity.
func (cpu *CrackedPasswordUpdate) SetRelatedTask(t *Task) *CrackedPasswordUpdate {
	return cpu.SetRelatedTaskID(t.ID)
}

// Mutation returns the CrackedPasswordMutation object of the builder.
func (cpu *CrackedPasswordUpdate) Mutation() *CrackedPasswordMutation {
	return cpu.mutation
}

// ClearRelatedTask clears the "related_task" edge to the Task entity.
func (cpu *CrackedPasswordUpdate) ClearRelatedTask() *CrackedPasswordUpdate {
	cpu.mutation.ClearRelatedTask()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CrackedPasswordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cpu.hooks) == 0 {
		if err = cpu.check(); err != nil {
			return 0, err
		}
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrackedPasswordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpu.check(); err != nil {
				return 0, err
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			if cpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CrackedPasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CrackedPasswordUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CrackedPasswordUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *CrackedPasswordUpdate) check() error {
	if _, ok := cpu.mutation.RelatedTaskID(); cpu.mutation.RelatedTaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CrackedPassword.related_task"`)
	}
	return nil
}

func (cpu *CrackedPasswordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crackedpassword.Table,
			Columns: crackedpassword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crackedpassword.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldHash,
		})
	}
	if value, ok := cpu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldValue,
		})
	}
	if cpu.mutation.RelatedTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.RelatedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crackedpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CrackedPasswordUpdateOne is the builder for updating a single CrackedPassword entity.
type CrackedPasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CrackedPasswordMutation
}

// SetHash sets the "hash" field.
func (cpuo *CrackedPasswordUpdateOne) SetHash(s string) *CrackedPasswordUpdateOne {
	cpuo.mutation.SetHash(s)
	return cpuo
}

// SetValue sets the "value" field.
func (cpuo *CrackedPasswordUpdateOne) SetValue(s string) *CrackedPasswordUpdateOne {
	cpuo.mutation.SetValue(s)
	return cpuo
}

// SetRelatedTaskID sets the "related_task" edge to the Task entity by ID.
func (cpuo *CrackedPasswordUpdateOne) SetRelatedTaskID(id uuid.UUID) *CrackedPasswordUpdateOne {
	cpuo.mutation.SetRelatedTaskID(id)
	return cpuo
}

// SetRelatedTask sets the "related_task" edge to the Task entity.
func (cpuo *CrackedPasswordUpdateOne) SetRelatedTask(t *Task) *CrackedPasswordUpdateOne {
	return cpuo.SetRelatedTaskID(t.ID)
}

// Mutation returns the CrackedPasswordMutation object of the builder.
func (cpuo *CrackedPasswordUpdateOne) Mutation() *CrackedPasswordMutation {
	return cpuo.mutation
}

// ClearRelatedTask clears the "related_task" edge to the Task entity.
func (cpuo *CrackedPasswordUpdateOne) ClearRelatedTask() *CrackedPasswordUpdateOne {
	cpuo.mutation.ClearRelatedTask()
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CrackedPasswordUpdateOne) Select(field string, fields ...string) *CrackedPasswordUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CrackedPassword entity.
func (cpuo *CrackedPasswordUpdateOne) Save(ctx context.Context) (*CrackedPassword, error) {
	var (
		err  error
		node *CrackedPassword
	)
	if len(cpuo.hooks) == 0 {
		if err = cpuo.check(); err != nil {
			return nil, err
		}
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CrackedPasswordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpuo.check(); err != nil {
				return nil, err
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			if cpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CrackedPasswordUpdateOne) SaveX(ctx context.Context) *CrackedPassword {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CrackedPasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CrackedPasswordUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *CrackedPasswordUpdateOne) check() error {
	if _, ok := cpuo.mutation.RelatedTaskID(); cpuo.mutation.RelatedTaskCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "CrackedPassword.related_task"`)
	}
	return nil
}

func (cpuo *CrackedPasswordUpdateOne) sqlSave(ctx context.Context) (_node *CrackedPassword, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   crackedpassword.Table,
			Columns: crackedpassword.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: crackedpassword.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CrackedPassword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, crackedpassword.FieldID)
		for _, f := range fields {
			if !crackedpassword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != crackedpassword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Hash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldHash,
		})
	}
	if value, ok := cpuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: crackedpassword.FieldValue,
		})
	}
	if cpuo.mutation.RelatedTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.RelatedTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   crackedpassword.RelatedTaskTable,
			Columns: []string{crackedpassword.RelatedTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CrackedPassword{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{crackedpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
